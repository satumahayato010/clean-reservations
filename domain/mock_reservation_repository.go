// Code generated by MockGen. DO NOT EDIT.
// Source: domain/reservation_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/reservation_repository.go -destination=domain/mock_reservation_repository.go -package=domain
//

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
	isgomock struct{}
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockReservationRepository) Add(ctx context.Context, reservation *Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockReservationRepositoryMockRecorder) Add(ctx, reservation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockReservationRepository)(nil).Add), ctx, reservation)
}

// FindByUserID mocks base method.
func (m *MockReservationRepository) FindByUserID(ctx context.Context, userID string) ([]Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].([]Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockReservationRepositoryMockRecorder) FindByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockReservationRepository)(nil).FindByUserID), ctx, userID)
}

// RemoveByID mocks base method.
func (m *MockReservationRepository) RemoveByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByID indicates an expected call of RemoveByID.
func (mr *MockReservationRepositoryMockRecorder) RemoveByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByID", reflect.TypeOf((*MockReservationRepository)(nil).RemoveByID), ctx, id)
}
